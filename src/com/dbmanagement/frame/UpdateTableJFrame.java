/*
 * UpdateTableJFrame.java
 *
 * Created on March 2, 2010, 1:31 PM
 */

package com.dbmanagement.frame;

import com.dbmanagement.bean.DataBaseInformation;
import com.dbmanagement.common.CommonHelper;
import com.dbmanagement.connection.ConnectionHelper;
import com.dbmanagement.main.MainWindow;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import com.dbmanagement.main.*;
/**
 *
 * @author  bishnu
 */
public class UpdateTableJFrame extends javax.swing.JFrame {
    
    /** Creates new form UpdateTableJFrame */
    private DataBaseInformation databaseInformation;
    MainWindow parent;
    DefaultTableModel model,tempModel;
    public UpdateTableJFrame(MainWindow parent) {
        setTitle("Update Table");
        this.parent=parent;
        databaseInformation=parent.getDatabaseInformation();
        setUndecorated(true);
        getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
        initComponents();
        pnlData.setVisible(true);
        JLabel lblTab1=new JLabel("Tab 1");
        JLabel lblTab2=new JLabel("Tab 2");
        pnlTab.add("Design",lblTab1);
        pnlTab.add("Data",lblTab2);
        model=new DefaultTableModel( new Object [][] {},
                new String [] {"First Name", "Last Name", "Email", "Phone"});
        myTable.setModel(model);
        pnlTop.setVisible(false);
        pnlMiddle.setVisible(false);
        CommonHelper.setFrameInCenter(this);
        showDesign();
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlData = new javax.swing.JPanel();
        pnlMiddle = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        myTable = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        txtReTablename = new javax.swing.JTextField();
        btnReTablename = new javax.swing.JButton();
        btnDropTable = new javax.swing.JButton();
        pnlBottom = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        pnlTop = new javax.swing.JPanel();
        cmbTableName = new javax.swing.JComboBox();
        btnView = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        pnlTab = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        myTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Type", "Length", "Decimals", "Allow Null", "Primary Key"
            }
        ));
        myTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                myTablehandleAddRowByTab(evt);
            }
        });
        jScrollPane1.setViewportView(myTable);

        btnAdd.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(0, 0, 102));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleAdd(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 102));
        jButton2.setText("Edit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleEdit(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 0, 102));
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleDelete(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 0, 102));
        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleCancel(evt);
            }
        });

        btnReTablename.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnReTablename.setForeground(new java.awt.Color(0, 0, 102));
        btnReTablename.setText("Rename Table");
        btnReTablename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleRenameTable(evt);
            }
        });

        btnDropTable.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnDropTable.setForeground(new java.awt.Color(0, 0, 102));
        btnDropTable.setText("Delete Table");
        btnDropTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleDropTable(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 102));
        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1handleOk(evt);
            }
        });

        javax.swing.GroupLayout pnlBottomLayout = new javax.swing.GroupLayout(pnlBottom);
        pnlBottom.setLayout(pnlBottomLayout);
        pnlBottomLayout.setHorizontalGroup(
            pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBottomLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlBottomLayout.setVerticalGroup(
            pnlBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBottomLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMiddleLayout = new javax.swing.GroupLayout(pnlMiddle);
        pnlMiddle.setLayout(pnlMiddleLayout);
        pnlMiddleLayout.setHorizontalGroup(
            pnlMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMiddleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMiddleLayout.createSequentialGroup()
                        .addComponent(txtReTablename, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(btnReTablename)
                        .addGap(15, 15, 15)
                        .addComponent(btnDropTable)
                        .addGap(20, 20, 20)
                        .addComponent(btnAdd)
                        .addGap(25, 25, 25)
                        .addComponent(jButton2)
                        .addGap(26, 26, 26)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMiddleLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMiddleLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlMiddleLayout.setVerticalGroup(
            pnlMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMiddleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(pnlMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReTablename)
                    .addComponent(txtReTablename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(btnAdd)
                    .addComponent(btnDropTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cmbTableName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTableNameActionPerformed(evt);
            }
        });

        btnView.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnView.setForeground(new java.awt.Color(0, 0, 102));
        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                handleViewTable(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel1.setText("Table");

        javax.swing.GroupLayout pnlTopLayout = new javax.swing.GroupLayout(pnlTop);
        pnlTop.setLayout(pnlTopLayout);
        pnlTopLayout.setHorizontalGroup(
            pnlTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(cmbTableName, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(207, Short.MAX_VALUE))
        );
        pnlTopLayout.setVerticalGroup(
            pnlTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTopLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(pnlTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTableName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                handleTab(evt);
            }
        });

        javax.swing.GroupLayout pnlDataLayout = new javax.swing.GroupLayout(pnlData);
        pnlData.setLayout(pnlDataLayout);
        pnlDataLayout.setHorizontalGroup(
            pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDataLayout.createSequentialGroup()
                .addGroup(pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDataLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(pnlMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDataLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlTab, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDataLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(pnlTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        pnlDataLayout.setVerticalGroup(
            pnlDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDataLayout.createSequentialGroup()
                .addComponent(pnlTab, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlMiddle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
        );

        jPanel5.setBackground(new java.awt.Color(0, 0, 0));
        jPanel5.setPreferredSize(new java.awt.Dimension(365, 206));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dbmanagement/main/images.jpg"))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Calibri", 3, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 51, 51));
        jLabel8.setText(" DATABASE ADMINISTRATOR APPLICATION");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(127, 127, 127)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 768, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dbmanagement/main/homee.jpg"))); // NOI18N
        jButton9.setText(" HOME            ");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dbmanagement/main/cncts.jpg"))); // NOI18N
        jButton10.setText(" CONTACT US");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dbmanagement/main/about.jpg"))); // NOI18N
        jButton11.setText("ABOUT APP  ");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dbmanagement/main/helpe.jpg"))); // NOI18N
        jButton12.setText(" HELP              ");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dbmanagement/main/feed2.jpg"))); // NOI18N
        jButton13.setText("FEEDBACK     ");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(jButton13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/dbmanagement/main/logou.jpg"))); // NOI18N
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 1139, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlData, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        setSize(new java.awt.Dimension(1142, 755));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void handleDropTable(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleDropTable
        
        String selectedTableName=cmbTableName.getSelectedItem().toString();
        if(!CommonHelper.isStringEmptyOrNull(selectedTableName)){
            int status=JOptionPane.showConfirmDialog(null,"Are You sure you want to drop the table : "+ selectedTableName ,"Change Table Name",JOptionPane.YES_NO_OPTION);
            if(status == JOptionPane.YES_OPTION){
                String dropTableSql="DROP TABLE "+selectedTableName;
                int i=ConnectionHelper.tableUpdateQuery(databaseInformation,dropTableSql);
                if(i>=0){
                    JOptionPane.showMessageDialog(null,"Table "+selectedTableName + " is deleted Successfully!!!");
                    UpdateTableJFrame updateTable =new UpdateTableJFrame(parent);
                    updateTable.setVisible(true);
                    this.setVisible(false);
                }
                
            }
        }
        
        
    }//GEN-LAST:event_handleDropTable
    
    private void handleRenameTable(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleRenameTable
// TODO add your handling code here:
        String selectedTableName=cmbTableName.getSelectedItem().toString();
        String reTablename=txtReTablename.getText();
        if(!CommonHelper.isStringEmptyOrNull(reTablename)){
            String sql="ALTER TABLE "+ selectedTableName +"  RENAME "+ reTablename +"";
            int status=JOptionPane.showConfirmDialog(null,"Are You sure you want to change name of "+ selectedTableName +"","Change Table Name",JOptionPane.YES_NO_OPTION);
            if(status==JOptionPane.YES_OPTION) {
                try{
                    int i=ConnectionHelper.tableUpdateQuery(databaseInformation,sql);
                    
                    cmbTableName.removeAllItems();
                    comboBind();
                } catch (Exception ex) {
                    System.out.println("Exception "+ex);
                }
            }
        }else{
            JOptionPane.showMessageDialog(null,"Please enter the Table Name!!");
        }
        
    }//GEN-LAST:event_handleRenameTable
    
    private void handleCancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleCancel
// TODO add your handling code here:
        int tabIndx=pnlTab.getSelectedIndex();
        if(pnlTab.getTitleAt(tabIndx).equals("Data")) {
            btnAdd.setText("Add");
            viewTable();
        } else if(pnlTab.getTitleAt(tabIndx).equals("Design")) {
            btnAdd.setText("Add");
            viewTableDesign();
        }
    }//GEN-LAST:event_handleCancel
    
    private void handleDelete(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleDelete
// TODO add your handling code here:
        int tabIndx=pnlTab.getSelectedIndex();
        if(pnlTab.getTitleAt(tabIndx).equals("Data")) {
            String selectedTableName=cmbTableName.getSelectedItem().toString();
            int rowIndx=myTable.getSelectedRow();
            if(rowIndx>=0){
                Object pkFieldValue = GetData(myTable, rowIndx, 0);
                int status=JOptionPane.showConfirmDialog(null,"Are you sure, you want to delete record "+ pkFieldValue +" from "+ selectedTableName +"","Delete",JOptionPane.YES_NO_OPTION);
                if(status==JOptionPane.YES_OPTION) {
                    deleteRecords();
                }
            } else{
                JOptionPane.showMessageDialog(null,"Please Select a field!!!");
            }
            
        }
        
        else if(pnlTab.getTitleAt(tabIndx).equals("Design")) {
            String selectedTableName=cmbTableName.getSelectedItem().toString();
            int rowIndx=myTable.getSelectedRow();
            if(rowIndx>=0){
                Object fieldValue = GetData(myTable, rowIndx, 0);
                int status=JOptionPane.showConfirmDialog(null,"Are you sure, you want to delete "+ fieldValue+" field of "+selectedTableName+" table" ,"Delete",JOptionPane.YES_NO_OPTION);
                if(status == JOptionPane.YES_OPTION){
                    String deleteTblFieldSQL="ALTER TABLE "+ selectedTableName +" DROP COLUMN "+ fieldValue;
                    int delStatus = ConnectionHelper.tableUpdateQuery(databaseInformation,deleteTblFieldSQL);
                    if(delStatus>=0){
                        JOptionPane.showMessageDialog(null,fieldValue + " is deleted Successfully!!!");
                        viewTableDesign();
                    }
                }
            } else{
                JOptionPane.showMessageDialog(null,"Please Select a field!!!");
            }
            
        }
        
    }//GEN-LAST:event_handleDelete
    
    private void handleEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleEdit
// TODO add your handling code here:
        int tabIndx=pnlTab.getSelectedIndex();
        if(pnlTab.getTitleAt(tabIndx).equals("Data")) {
            editRecords();
        } else if(pnlTab.getTitleAt(tabIndx).equals("Design")) {
            editField();
        }
    }//GEN-LAST:event_handleEdit
    
    private void jButton1handleOk(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1handleOk
// TODO add your handling code here:
        this.setVisible(false);
        parent.setVisible(true);
    }//GEN-LAST:event_jButton1handleOk
    
    private void handleTab(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_handleTab
// TODO add your handling code here:
        int tabIndx=pnlTab.getSelectedIndex();
        if(pnlTab.getTitleAt(tabIndx).equals("Data")) {
            txtReTablename.setVisible(false);
            btnReTablename.setVisible(false);
            btnDropTable.setVisible(false);
            cmbTableName.removeAllItems();
            comboBind();
        } else if(pnlTab.getTitleAt(tabIndx).equals("Design")) {
            showDesign();
        }
    }//GEN-LAST:event_handleTab
    private void showDesign(){
        txtReTablename.setVisible(true);
        btnReTablename.setVisible(true);
        btnDropTable.setVisible(true);
        cmbTableName.removeAllItems();
        comboBind();
    }
    private void handleViewTable(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleViewTable
        int tabIndx=pnlTab.getSelectedIndex();
        if(pnlTab.getTitleAt(tabIndx).equals("Data")) {
            viewTable();
        } else if(pnlTab.getTitleAt(tabIndx).equals("Design")) {
            viewTableDesign();
        }
    }//GEN-LAST:event_handleViewTable
    
    private void handleAdd(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_handleAdd
// TODO add your handling code here:
        int tabIndx=pnlTab.getSelectedIndex();
        if(pnlTab.getTitleAt(tabIndx).equals("Data")) {
            insertRecord();
        } else if(pnlTab.getTitleAt(tabIndx).equals("Design")) {
            insertField();
        }
    }//GEN-LAST:event_handleAdd
    
    private void myTablehandleAddRowByTab(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_myTablehandleAddRowByTab
        int rowsIndx=myTable.getRowCount()-1;
        if(evt.getKeyCode()==9 && myTable.getSelectedColumn()==5) {
            if(myTable.getValueAt(rowsIndx,0)!=null && myTable.getValueAt(rowsIndx,1)!=null && myTable.getValueAt(rowsIndx,2)!=null) {
                if(!myTable.getValueAt(rowsIndx,0).equals("") && !myTable.getValueAt(rowsIndx,1).equals("") && !myTable.getValueAt(rowsIndx,2).equals("")) {
                    //  addBlankRow();
                }
            }
        }
    }//GEN-LAST:event_myTablehandleAddRowByTab

    private void cmbTableNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTableNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbTableNameActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        new login1().setVisible(true);
        this.setVisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        new contact().setVisible(true);
        this.setVisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        new about().setVisible(true);
        this.setVisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        new help().setVisible(true);
        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        new feedback().setVisible(true);
        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        new welcu().setVisible(true);
        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel4MouseClicked
    
    private void comboBind() {
        try{
            ArrayList tableNameList=ConnectionHelper.getTableName(databaseInformation);
            String[] tableNames=new String[tableNameList.size()];
            for(int i=0;i<tableNameList.size();i++) {
                tableNames[i]=(String)tableNameList.get(i);
                cmbTableName.addItem(tableNames[i]);
            }
        } catch (Exception ex) {
            System.out.println("Exception "+ex);
        }
        pnlTop.setVisible(true);
        pnlMiddle.setVisible(false);
    }
    
    
    private void viewTable() {
        String selectedTableName=cmbTableName.getSelectedItem().toString();
        pnlMiddle.setVisible(false);
        Vector heading=new Vector();
        String sql="select * from "+ selectedTableName +"";
        try{
            String[][] recordsList=ConnectionHelper.getRecordsList(databaseInformation,sql,heading);
            
            myTable.setModel(new javax.swing.table.DefaultTableModel(recordsList,heading.toArray() ){
                public boolean isCellEditable(int row,int col) {
                    if(col==0)
                        return false;
                    else
                        return true;
                }
            });
            pnlMiddle.setVisible(true);
        } catch (Exception ex) {
            System.out.println("Exception "+ex);
        }
    }
    
    
    private void viewTableDesign() {
        String selectedTableName=cmbTableName.getSelectedItem().toString();
        String sql="select * from "+ selectedTableName +"";
        try{
            String columnNameList[][]=ConnectionHelper.getColumnNameList(databaseInformation,sql);
            model=new DefaultTableModel(new Object [][] {},
                    new String [] {"First Name", "Last Name", "Email", "Phone"});
            tempModel=new DefaultTableModel(columnNameList,new String[]{"Name", "Type", "Length", "Decimals", "Allow Null", "Primary Key"});
            myTable.setModel(new javax.swing.table.DefaultTableModel(columnNameList,new String [] {"Name", "Type", "Length", "Decimals", "Allow Null", "Primary Key"}));
            formatTableColumn(myTable);
            pnlMiddle.setVisible(true) ;
        } catch(Exception ex) {
            System.out.println("Exception "+ex);
        }
    }
    
    
    private  void insertRecord() {
        if(btnAdd.getText().equals("Add")) {
            String selectedTableName=cmbTableName.getSelectedItem().toString();
            pnlMiddle.setVisible(false);
            Vector heading=new Vector();
            String sql="select * from "+ selectedTableName +"";
            try{
                String[][] recordsList=ConnectionHelper.getRecordsListForAddRow(databaseInformation,sql,heading);
                myTable.setModel(new javax.swing.table.DefaultTableModel(recordsList,heading.toArray() ));
                pnlMiddle.setVisible(true);
                btnAdd.setText("Save");
            } catch (Exception ex) {
                System.out.println("Exception "+ex);
            }
        } else if(btnAdd.getText().equals("Save")) {
            this.btnView.setFocusable(true);
            this.btnView.requestFocusInWindow();
            String selectedTableName=cmbTableName.getSelectedItem().toString();
            int lastColumnIndx=myTable.getColumnCount();
            int rowIndx=myTable.getRowCount()-1;
            Object pkFieldValue = GetData(myTable, rowIndx, 0);
            String field="";
            String values="";
            for(int c=0;c<lastColumnIndx;c++) {
                String columnName=myTable.getColumnName(c);
                Object obj1 = GetData(myTable, rowIndx, c);
                field=field+columnName;
                values=values+"'"+obj1+"'";
                if(c<lastColumnIndx-1) {
                    field=field+",";
                    values=values+",";
                }
            }
            String sql="insert into "+ selectedTableName +" ("+ field +") values ("+ values +")";
            System.out.println(sql);
            try {
                int i=ConnectionHelper.tableUpdateQuery(databaseInformation,sql);
                if(i>=0){
                    JOptionPane.showMessageDialog(null,"Saved Successfully!!!");
                    btnAdd.setText("Add");
                    viewTable();
                }
            } catch (Exception ex) {
                System.out.println("Exception "+ex);
            }
        }
    }
    
    
    private void insertField() {
        if(btnAdd.getText().equals("Add")) {
            String selectedTableName=cmbTableName.getSelectedItem().toString();
            String sql="select * from "+ selectedTableName +"";
            try{
                String columnNameList[][]=ConnectionHelper.getColumnNameListForAddRow(databaseInformation,sql);
                model=new DefaultTableModel(new Object [][] {},
                        new String [] {"First Name", "Last Name", "Email", "Phone"});
                myTable.setModel(new javax.swing.table.DefaultTableModel(columnNameList,new String [] {"Name", "Type", "Length", "Decimals", "Allow Null", "Primary Key"}));
                formatTableColumn(myTable);
                btnAdd.setText("Save");
                pnlMiddle.setVisible(true) ;
            } catch(Exception ex) {
                System.out.println("Exception "+ex);
            }
        } else if(btnAdd.getText().equals("Save")) {
            addNewFieldInTable();
        }
    }
    
    private void editRecords() {      
        String selectedTableName=cmbTableName.getSelectedItem().toString();
        int lastColumnIndx=myTable.getColumnCount();
        int rowIndx=myTable.getSelectedRow();
        int colIndx=myTable.getSelectedColumn();
        ListSelectionModel listSelectionModel = myTable.getSelectionModel();
        listSelectionModel.removeSelectionInterval(0,0);
        System.out.println("Select "+myTable.isCellSelected(rowIndx,colIndx));
        
        if(rowIndx>=0) {
            Object pkFieldValue = GetData(myTable, rowIndx, 0);
            String str="";
            for(int c=1;c<lastColumnIndx;c++) {
                String columnName=myTable.getColumnName(c);
                Object obj1 = GetData(myTable, rowIndx, c);
                str=str+columnName+"='"+ obj1 +"'";
                if(c<lastColumnIndx-1) {
                    str=str+",";
                }
            }
            String sql="update "+ selectedTableName +" set "+ str +" where "+ myTable.getColumnName(0) +"='"+ pkFieldValue +"'";
            System.out.println("Sql : "+sql);
            try {
                int i=ConnectionHelper.tableUpdateQuery(databaseInformation,sql);
                if(i>=0){
                    JOptionPane.showMessageDialog(null,"Successfully Updated!!!");                   
                }
                 viewTable();
                
            } catch (Exception ex) {
                System.out.println("Exception "+ex);
            }
        } else{
            JOptionPane.showMessageDialog(null,"Please Select a field!!!");
        }
    }
    
    
    private void deleteRecords() {
        String selectedTableName=cmbTableName.getSelectedItem().toString();
        int rowIndx=myTable.getSelectedRow();
        if(rowIndx>=0) {
            String columnName=myTable.getColumnName(0);
            Object obj1 = GetData(myTable, rowIndx, 0);
            String sql="delete from "+ selectedTableName +" where "+ columnName +"='"+ obj1 +"'";
            try {
                int i=ConnectionHelper.tableUpdateQuery(databaseInformation,sql);
                if(i>=0) {
                    JOptionPane.showMessageDialog(null,obj1 + " is deleted Successfully!!!");
                }
                viewTable();
            } catch (Exception ex) {
                System.out.println("Exception "+ex);
            }
        } else{
            JOptionPane.showMessageDialog(null,"Please Select a field!!!");
        }
    }
    
    // method to get selected cell value or record
    public Object GetData(JTable table, int row_index, int col_index){
        return table.getModel().getValueAt(row_index, col_index);
    }
    
    
    
    private  void addBlankRow() {
        model.insertRow(myTable.getRowCount(),new Object[]{"","","","","",""});
    }
    
    
    void formatTableColumn(JTable table){
        
        // set data type drop down in type column
        JComboBox comboBox = new JComboBox();
        comboBox.setMaximumRowCount(5);
        String[] dataTypes = new String[]{"tinyint", "smallint", "mediumint", "int", "integer","bigint","bit","real","double","float","decimal","numeric","char","varchar","date","time","year","timestamp","datetime","tinyblob","blob","mediumblob","longblob","tinytext","text","mediumtext","longtext","enum","set","binary","varbinary"};
        for (int i=0; i<dataTypes.length; i++) {
            comboBox.addItem(dataTypes[i]);
        }
        TableColumn columnType = table.getColumnModel().getColumn(1);
        columnType.setCellEditor(new DefaultCellEditor(comboBox));
        
        // set check box in allow null column
        JCheckBox checkBox = new JCheckBox();
        TableColumn columnAllowNull = table.getColumnModel().getColumn(4);
        columnAllowNull.setCellEditor(new DefaultCellEditor(checkBox));
        
        JCheckBox keyCheckBox = new JCheckBox();
        TableColumn columnPK = table.getColumnModel().getColumn(5);
        columnPK.setCellEditor(new DefaultCellEditor(keyCheckBox));
    }
    
    
    private void addNewFieldInTable() {
        String selectedTableName=cmbTableName.getSelectedItem().toString();
        String sql="";
        int rows=myTable.getRowCount()-1;
        int cols=myTable.getColumnCount();
        for(int c=0;c<cols;c++) {
            Object obj1 = GetData(myTable, rows, c);
            if(c==0 || c==1) {
                sql=sql+" "+obj1;
            } else if(c==2) {
                sql=sql+"("+obj1+")";
            } else if(c==4) {
                if(obj1!=null) {
                    if(obj1.equals(true)) {
                        sql=sql+" NULL";
                    } else {
                        sql=sql+" NOT NULL";
                    }
                } else {
                    sql=sql+" NOT NULL";
                }
            }
            
            else if(c==5) {
                if(obj1!=null) {
                    if(obj1.equals(true)) {
                        sql=sql+" PRIMARY KEY";
                    } else {
                        sql=sql+"";
                    }
                } else {
                    sql=sql+"";
                }
            }
            
        }
        sql="ALTER TABLE "+ selectedTableName +" ADD  "+ sql +"";
        try {
            int i=ConnectionHelper.tableUpdateQuery(databaseInformation,sql);
            if(i>=0) {
                JOptionPane.showMessageDialog(null,"Successfully Updated!!!");
            }
            btnAdd.setText("Add");
            viewTableDesign();
        } catch (Exception ex) {
            System.out.println("Exception "+ex);
        }
        
    }
    
    
    private void editField() {
        String selectedTableName=cmbTableName.getSelectedItem().toString();
        String sql="";
        int rows=myTable.getSelectedRow();
        if(rows>=0){
            //    Object key="false";
            int cols=myTable.getColumnCount();
            Object columnName=tempModel.getValueAt(rows,0);
            for(int c=0;c<cols;c++) {
                Object obj= tempModel.getValueAt(rows,c);
                Object obj1 = GetData(myTable, rows, c);
                if(c==0 || c==1) {
                    sql=sql+" "+obj1;
                } else if(c==2) {
                    sql=sql+"("+obj1+")";
                } else if(c==4) {
                    if(obj1!=null) {
                        if(obj1.equals(true)) {
                            sql=sql+" NULL";
                        } else {
                            sql=sql+" NOT NULL";
                        }
                    } else {
                        sql=sql+" NOT NULL";
                    }
                } else if(c==5) {
                    if(obj1!=null) {
                        if(obj1.equals(true)) {
                            //   key="true";
                            sql=sql+" PRIMARY KEY";
                        } else {
                            sql=sql+"";
                        }
                    }else {
                        sql=sql+"";
                    }
                }
            }
            
            sql="ALTER TABLE "+ selectedTableName +" CHANGE  "+ columnName +""+ sql +"";
            System.out.println("SQL "+sql);
            try {
                int i=ConnectionHelper.tableUpdateQuery(databaseInformation,sql);
                if(i>=0) {
                    JOptionPane.showMessageDialog(null,"Successfully Updated!!!");
                    btnAdd.setText("Add");
                    
                }
                viewTableDesign();
                
            } catch (Exception ex) {
                System.out.println("Exception "+ex);
            }
        }
        
        else{
            JOptionPane.showMessageDialog(null,"Please Select a field!!!");
        }
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDropTable;
    private javax.swing.JButton btnReTablename;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox cmbTableName;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable myTable;
    private javax.swing.JPanel pnlBottom;
    private javax.swing.JPanel pnlData;
    private javax.swing.JPanel pnlMiddle;
    private javax.swing.JTabbedPane pnlTab;
    private javax.swing.JPanel pnlTop;
    private javax.swing.JTextField txtReTablename;
    // End of variables declaration//GEN-END:variables
    
}
